const PDFDocument = require('pdfkit');
import fs from 'fs';
import { sequelize } from '../config/dbConnection';

export const statspdfService = {
    async generateStats(products:[unknown[],unknown]){
        const doc = new PDFDocument();
        const today = new Date();
        let month = today.getMonth();
        let year = today.getFullYear();
        if(month===0){
            month=12;
            year = year-1;
        }
        doc.pipe(fs.createWriteStream(`public/stats-${month}-${year}.pdf`));
        doc.image('public/logo.png', 450, 10, {
            fit: [100, 100],
            align: 'right',
            valign: 'top'
        });
        doc.moveDown();
        doc.moveTo(0, 120).lineTo(700, 120).stroke();
        doc.moveDown();
        doc.fontSize(15).text(`monthly statistics`, 100, 100);
        doc.moveDown();
        doc.fontSize(15).text(`total products sold = ${products[0].length}`, 100, 150);
        doc.moveDown();
        doc.fontSize(15).text(`product details:`, 100, 200);
        doc.moveDown();
        let tbl = doc.table();
        tbl.row(['item name', 'description', 'actual price','discounted price','shipped by'])
        doc.moveDown();

        interface itemInterface {
            name: string,
            description: string,
            seller_id: number,
            actual_price: number,
            discounted_price: number
        }
        interface sellerInterface {
            email: string
        }
        interface Prods{
            id: number,
            name: string,
            seller_product_id: number,
            status: string
        }
        let amt:number = 0;
        let adminearn:number = 0;
        for(const product of products[0]){
            const tempprod = product as Prods;
            const items = await sequelize.query(`select * from seller_products where id = ${tempprod.seller_product_id}`)
            for (const item of items[0]) {
                const temp = item as itemInterface;
                adminearn = adminearn + ((0.1)*(temp.actual_price));
                amt = amt + temp.discounted_price;
                const seller = await sequelize.query(`select email from users where id in (${temp.seller_id})`)
                const tempSeller = seller[0][0] as sellerInterface;
                tbl.row([`${temp.name}`, `${temp.description}`, `${temp.actual_price}`, `${temp.discounted_price}`, `${tempSeller.email}`])
                doc.moveDown();
            }
        }
        
        doc.moveDown();
        doc.fontSize(15).text(`total revenue made:${amt}`);
        doc.moveDown();
        doc.fontSize(15).text(`total earnings of the month:${adminearn}`);
        doc.moveDown();
        
        doc.addPage();
        doc.image('public/logo.png', 450, 10, {
            fit: [100, 100],
            align: 'right',
            valign: 'top'
        });
        doc.moveDown();
        doc.moveTo(0, 120).lineTo(700, 120).stroke();
        doc.moveDown();
        
        doc.fontSize(15).text('this is an autogenerated label and does not need signature', 100, 650);
        doc.moveTo(0, 700).lineTo(700, 700).stroke();
        doc.end();

        return (`public/stats-${month}-${year}.pdf`)
        // const result = await invoiceEmailService.sendEmail(address!.user.email,path);
    }
}