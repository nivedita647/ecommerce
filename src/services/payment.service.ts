const PDFDocument = require('pdfkit');
import fs from 'fs'
import { paymentRepository } from "../repositories/payment.repository";
import { addressRepository } from "../repositories/address.repository";
import { orderRepository } from "../repositories/order.repository";
import { sequelize } from '../config/dbConnection';
import { invoiceEmailService } from './invoiceEmail.service';
import { cartProductMappingRepository } from '../repositories/cartProductMapping.repository';

export const paymentService = {
    async generateInvoice(id: number) {
        const payment = await paymentRepository.findByOrder(id);
        console.log(payment);
        
        const address = await addressRepository.findById(Number(payment?.address_id));
        console.log(address);
        
        const doc = new PDFDocument();
        doc.pipe(fs.createWriteStream(`public/invoice${id}.pdf`));
        doc.image('public/logo.png', 450, 10, {
            fit: [100, 100],
            align: 'right',
            valign: 'top'
        });
        doc.moveDown();
        doc.moveTo(0, 120).lineTo(700, 120).stroke();
        doc.moveDown();
        doc.fontSize(15).text(`ship to`, 100, 100);
        doc.moveDown();
        doc.text(`${address?.user.firstName} ${address?.user.lastName}`, {
            width: 310,
            align: 'left'
        });
        doc.moveDown();
        doc.text(`House: ${address?.dataValues.house_num}`, {
            width: 310,
            align: 'left'
        });
        doc.moveDown();
        doc.text(`Locality: ${address?.dataValues.locality}`, {
            width: 310,
            align: 'left'
        });
        doc.moveDown();
        doc.text(`Area: ${address?.dataValues.area}`, {
            width: 310,
            align: 'left'
        });
        doc.moveDown();
        doc.text(`City: ${address?.dataValues.city}`, {
            width: 310,
            align: 'left'
        });
        doc.moveDown();
        doc.text(`State: ${address?.dataValues.state}`, {
            width: 310,
            align: 'left'
        });
        doc.moveDown();
        doc.text(`Pincode: ${address?.dataValues.pincode}`, {
            width: 310,
            align: 'left'
        });
        doc.moveDown();
        doc.fontSize(15).text(`shipped by amazon`, 100, 650);
        doc.moveDown();
        doc.moveTo(0, 700).lineTo(700, 700).stroke();
        doc.moveDown();

        doc.addPage();
        doc.fontSize(15).text(`product details`, 100, 100);
        doc.moveDown();
        // doc.text(`item name | description | actual price | discounted price | shipped by`, {
        //     width: 410,
        //     align: 'left'
        // });
        let tbl = doc.table();
        tbl.row(['item name', 'description', 'actual price','discounted price','shipped by'])
        doc.moveDown();

        interface itemInterface {
            id:number,
            name: string,
            description: string,
            seller_id: number,
            actual_price: number,
            discounted_price: number
        }
        interface sellerInterface {
            email: string
        }
        const items = await sequelize.query(`select * from seller_products where id in (select seller_product_id from cart_product_mappings where cart_id in (select id from carts where user_id in (select user_id from orders where id=${id}) ))`)
        for (const item of items[0]) {
            const temp = item as itemInterface;
            const seller = await sequelize.query(`select email from users where id in (select user_id from sellers where id = ${temp.seller_id})`)
            const tempSeller = seller[0][0] as sellerInterface;
            tbl.row([`${temp.name}`, `${temp.description}`, `${temp.actual_price}`, `${temp.discounted_price}`, `${tempSeller.email}`])
            doc.moveDown();
        }

        doc.moveDown();

        doc.addPage();
        doc.image('public/logo.png', 450, 10, {
            fit: [100, 100],
            align: 'right',
            valign: 'top'
        });
        doc.moveDown();
        doc.moveTo(0, 120).lineTo(700, 120).stroke();
        doc.moveDown();
        doc.fontSize(15).text(`ship to: ${address?.user.firstName} ${address?.user.lastName}`, 100, 150);
        doc.moveDown();
        doc.fontSize(15).text(`amount payable: ${payment?.dataValues.order_amt}`, 100, 200);
        doc.moveDown();
        doc.fontSize(15).text('shipping charges: Rs. 1234', 100, 250);
        doc.moveDown();
        doc.fontSize(15).text('this is an autogenerated label and does not need signature', 100, 650);
        doc.moveTo(0, 700).lineTo(700, 700).stroke();
        doc.end();

        const path = `public/invoice${id}.pdf`
        console.log(address!.user.email);
        
        const result = await invoiceEmailService.sendEmail(address!.user.email,path);
    }
}